// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema auth rules can define public auth with no provider 1`] = `
"type widget @model @auth(rules: [{allow: public}])
{
  id: ID! @primaryKey
  title: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}"
`;

exports[`schema auth rules global public auth 1`] = `
{
  "functionSlots": [],
  "schema": "type A @model @auth(rules: [{allow: public}])
{
  id: ID! @primaryKey
  field: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type B @model @auth(rules: [{allow: public}])
{
  id: ID! @primaryKey
  field: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type C @model @auth(rules: [{allow: public}])
{
  id: ID! @primaryKey
  d: D @hasOne
  cDId: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type D @model @auth(rules: [{allow: public}])
{
  id: ID! @primaryKey
  can: Int
  you: Boolean
  tell: Float
  i: AWSDate
  am: AWSIPAddress
  getting: AWSURL
  tired: Tired
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum Tired {
?
}",
}
`;

exports[`schema generation with relationships 1`] = `
"type BoringParent @model 
{
  id: ID! @primaryKey
  childNormal: BoringChild @hasOne
  childReciprocal: BoringReciprocalChild @hasOne
  childHasManyNormal: [BoringHasManyChild] @hasMany
  childHasManyReciprocal: [ReciprocalHasManyChild] @hasMany
  boringParentChildNormalId: ID
  boringParentChildReciprocalId: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type BoringChild @model 
{
  id: ID! @primaryKey
  value: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type BoringReciprocalChild @model 
{
  id: ID! @primaryKey
  parent: BoringParent @belongsTo
  value: String
  boringReciprocalChildParentId: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type BoringHasManyChild @model 
{
  id: ID! @primaryKey
  value: String
  boringParentChildHasManyNormalId: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ReciprocalHasManyChild @model 
{
  id: ID! @primaryKey
  value: String
  parent: BoringParent @belongsTo
  boringParentChildHasManyReciprocalId: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CPKParent @model 
{
  CPKParentIdFieldA: ID! @primaryKey(sortKeyFields: ["CPKParentIdFieldB"])
  CPKParentIdFieldB: ID!
  childNormal: CPKChild @hasOne
  childReciprocal: CPKReciprocalChild @hasOne
  childHasManyNormal: [CPKHasManyChild] @hasMany
  childHasManyReciprocal: [CPKReciprocalHasManyChild] @hasMany
  cPKParentChildNormalCPKChildIdFieldA: ID
  cPKParentChildNormalCPKChildIdFieldB: ID
  cPKParentChildReciprocalCPKReciprocalChildIdFieldA: ID
  cPKParentChildReciprocalCPKReciprocalChildIdFieldB: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CPKChild @model 
{
  CPKChildIdFieldA: ID! @primaryKey(sortKeyFields: ["CPKChildIdFieldB"])
  CPKChildIdFieldB: ID!
  value: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CPKReciprocalChild @model 
{
  CPKReciprocalChildIdFieldA: ID! @primaryKey(sortKeyFields: ["CPKReciprocalChildIdFieldB"])
  CPKReciprocalChildIdFieldB: ID!
  parent: CPKParent @belongsTo
  value: String
  cPKReciprocalChildParentCPKParentIdFieldA: ID
  cPKReciprocalChildParentCPKParentIdFieldB: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CPKHasManyChild @model 
{
  CPKHasManyChildIdFieldA: ID! @primaryKey(sortKeyFields: ["CPKHasManyChildIdFieldB"])
  CPKHasManyChildIdFieldB: ID!
  value: String
  cPKParentChildHasManyNormalCPKParentIdFieldA: ID
  cPKParentChildHasManyNormalCPKParentIdFieldB: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CPKReciprocalHasManyChild @model 
{
  CPKReciprocalHasManyChildIdFieldA: ID! @primaryKey(sortKeyFields: ["CPKReciprocalHasManyChildIdFieldB"])
  CPKReciprocalHasManyChildIdFieldB: ID!
  value: String
  parent: CPKParent @belongsTo
  cPKParentChildHasManyReciprocalCPKParentIdFieldA: ID
  cPKParentChildHasManyReciprocalCPKParentIdFieldB: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}"
`;
