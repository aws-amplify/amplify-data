// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SQL Schema with sql statement references schema with full path sql reference 1`] = `
{
  "customSqlDataSourceStrategies": [
    {
      "entry": "/full/path/to/sql/statement/directory/testReferenceName",
      "fieldName": "callSql",
      "typeName": "Query",
    },
  ],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type widget @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
  someOwnerField: String
}

type Query {
  callSql: widget @sql(reference: "/full/path/to/sql/statement/directory/testReferenceName") @auth(rules: [{allow: public, provider: apiKey}])
}",
}
`;

exports[`ai routes conversations 1`] = `
"type Profile @aws_api_key
{
  value: Int
  unit: String
}

type Mutation {
  ChatBot(conversationId: ID!, content: [AmplifyAIContentBlockInput], aiContext: AWSJSON, toolConfiguration: AmplifyAIToolConfigurationInput): AmplifyAIConversationMessage @conversation(aiModel: "anthropic.claude-3-haiku-20240307-v1:0", systemPrompt: "Hello, world!", auth: { strategy: owner, provider: userPools }, tools: [{ name: "myToolQuery", description: "does a thing", queryName: "myToolQuery" }, { name: "anotherToolQuery", description: "does a different thing", queryName: "anotherToolQuery" }]) @aws_cognito_user_pools
  MultilinePromptChatBot(conversationId: ID!, content: [AmplifyAIContentBlockInput], aiContext: AWSJSON, toolConfiguration: AmplifyAIToolConfigurationInput): AmplifyAIConversationMessage @conversation(aiModel: "anthropic.claude-3-haiku-20240307-v1:0", systemPrompt: "You are a helpful assistant.\\n        Respond in the poetic form of haiku.", auth: { strategy: owner, provider: userPools }, tools: [{ name: "tool_name_for_myToolQuery", description: "does a thing", queryName: "myToolQuery" }, { name: "tool_name_for_anotherToolQuery", description: "does a different thing", queryName: "anotherToolQuery" }]) @aws_cognito_user_pools
  CustomHandlerChatBot(conversationId: ID!, content: [AmplifyAIContentBlockInput], aiContext: AWSJSON, toolConfiguration: AmplifyAIToolConfigurationInput): AmplifyAIConversationMessage @conversation(aiModel: "anthropic.claude-3-haiku-20240307-v1:0", systemPrompt: "Hello, world!", auth: { strategy: owner, provider: userPools }, handler: { functionName: "FnCustomHandlerChatBot", eventVersion: "1.0" }) @aws_cognito_user_pools
}

type Query {
  myToolQuery(a: Int, b: String): Profile @function(name: "FnMyToolQuery") @auth(rules: [{allow: public, provider: apiKey}])
  anotherToolQuery: String @function(name: "FnAnotherToolQuery") @auth(rules: [{allow: public, provider: apiKey}])
}

enum AmplifyAIConversationParticipantRole {
  user
  assistant
}

interface AmplifyAIConversationMessage {
  id: ID!
  conversationId: ID!
  associatedUserMessageId: ID
  role: AmplifyAIConversationParticipantRole
  content: [AmplifyAIContentBlock]
  aiContext: AWSJSON
  toolConfiguration: AmplifyAIToolConfiguration
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}

input AmplifyAIDocumentBlockSourceInput {
  bytes: String
}

input AmplifyAIDocumentBlockInput {
  format: String!
  name: String!
  source: AmplifyAIDocumentBlockSourceInput!
}

input AmplifyAIImageBlockSourceInput {
  bytes: String
}

input AmplifyAIImageBlockInput {
  format: String!
  source: AmplifyAIImageBlockSourceInput!
}

input AmplifyAIToolUseBlockInput {
  toolUseId: String!
  name: String!
  input: AWSJSON!
}

input AmplifyAIToolResultContentBlockInput {
  document: AmplifyAIDocumentBlockInput
  image: AmplifyAIImageBlockInput
  json: AWSJSON
  text: String
}

input AmplifyAIToolResultBlockInput {
  content: [AmplifyAIToolResultContentBlockInput!]!
  toolUseId: String!
  status: String
}

type AmplifyAIDocumentBlockSource {
  bytes: String
}

type AmplifyAIDocumentBlock {
  format: String!
  name: String!
  source: AmplifyAIDocumentBlockSource!
}

type AmplifyAIImageBlock {
  format: String!
  source: AmplifyAIImageBlockSource!
}

type AmplifyAIImageBlockSource {
  bytes: String
}

type AmplifyAIToolUseBlock {
  toolUseId: String!
  name: String!
  input: AWSJSON!
}

type AmplifyAIToolResultContentBlock {
  document: AmplifyAIDocumentBlock
  image: AmplifyAIImageBlock
  json: AWSJSON
  text: String
}

type AmplifyAIToolResultBlock {
  content: [AmplifyAIToolResultContentBlock!]!
  toolUseId: String!
  status: String
}

type AmplifyAIContentBlockText {
  text: String
}

type AmplifyAIContentBlockImage {
  image: AmplifyAIImageBlock
}

type AmplifyAIContentBlockDocument {
  document: AmplifyAIDocumentBlock
}

type AmplifyAIContentBlockToolUse {
  toolUse: AmplifyAIToolUseBlock
}

type AmplifyAIContentBlockToolResult {
  toolResult: AmplifyAIToolResultBlock
}

input AmplifyAIContentBlockInput {
  text: String
  document: AmplifyAIDocumentBlockInput
  image: AmplifyAIImageBlockInput
  toolResult: AmplifyAIToolResultBlockInput
  toolUse: AmplifyAIToolUseBlockInput
}

type AmplifyAIContentBlock {
  text: String
  document: AmplifyAIDocumentBlock
  image: AmplifyAIImageBlock
  toolResult: AmplifyAIToolResultBlock
  toolUse: AmplifyAIToolUseBlock
}

input AmplifyAIToolConfigurationInput {
  tools: [AmplifyAIToolInput]
}

input AmplifyAIToolInput {
  toolSpec: AmplifyAIToolSpecificationInput
}

input AmplifyAIToolSpecificationInput {
  name: String!
  description: String
  inputSchema: AmplifyAIToolInputSchemaInput!
}

input AmplifyAIToolInputSchemaInput {
  json: AWSJSON
}

type AmplifyAIToolConfiguration {
  tools: [AmplifyAITool]
}

type AmplifyAITool {
  toolSpec: AmplifyAIToolSpecification
}

type AmplifyAIToolSpecification {
  name: String!
  description: String
  inputSchema: AmplifyAIToolInputSchema!
}

type AmplifyAIToolInputSchema {
  json: AWSJSON
}

type AmplifyAIConversationMessageStreamPart @aws_cognito_user_pools {
  id: ID!
  owner: String
  conversationId: ID!
  associatedUserMessageId: ID!
  contentBlockIndex: Int
  contentBlockText: String
  contentBlockDeltaIndex: Int
  contentBlockToolUse: AmplifyAIToolUseBlock
  contentBlockDoneAtIndex: Int
  stopReason: String
  errors: [AmplifyAIConversationTurnError]
  p: String
}

type AmplifyAIConversationTurnError @aws_cognito_user_pools {
  message: String!
  errorType: String!
}"
`;

exports[`ai routes generations 1`] = `
"type Recipe @model @auth(rules: [{allow: public, provider: apiKey}])
{
  ingredients: [String]
  directions: String
}

type Query {
  makeRecipe: Recipe @generation(aiModel: "anthropic.claude-3-haiku-20240307-v1:0", systemPrompt: "Hello, world!") 
}"
`;

exports[`custom operations Add entities to SQL schema add custom type, enum, and custom query to generated SQL schema 1`] = `
"type post @model(timestamps: null) @auth(rules: [{allow: private}])
{
  title: String!
  description: String
  author: String
}

type PostMeta @aws_cognito_user_pools
{
  viewCount: Int
  approvedOn: AWSDate
}

enum PostStatus {
  draft
  pending
  approved
  published
}

type Query {
  getPostMeta(id: String): PostMeta @sql(statement: "SELECT viewCount, approvedOn FROM some_table") @auth(rules: [{allow: private}])
}"
`;

exports[`custom operations custom mutation 1`] = `
"type LikePostResult @aws_api_key
{
  likes: Int!
}

type Mutation {
  likePost(postId: String!): LikePostResult @function(name: "likePost") @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`custom operations custom query 1`] = `
"type EchoResult @aws_api_key
{
  resultContent: String
}

type Query {
  echo(inputContent: String!): EchoResult @function(name: "echoFunction") @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`custom operations for a sql schema can define public auth with no provider 1`] = `
"type A @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  id: String! @primaryKey
  field: String
}"
`;

exports[`custom operations for a sql schema custom operations - deprecated custom query 1`] = `
"type EchoResult @aws_api_key
{
  resultContent: String
}

type Query {
  echo(inputContent: String!): EchoResult @function(name: "echoFunction") @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`custom operations for a sql schema sql schema field-level auth 1`] = `
"type post @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  id: String! @primaryKey @auth(rules: [{allow: private}])
  title: String @auth(rules: [{allow: public, provider: apiKey}])
  author: String @auth(rules: [{allow: owner, ownerField: "author"}])
}"
`;

exports[`custom operations for a sql schema sql schema rename 1`] = `
"type RenamedPost @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}]) @refersTo(name: "post")
{
  id: String! @primaryKey
  title: String
  author: String
}"
`;

exports[`custom operations for a sql schema sql schema rename multiple models 1`] = `
"type tags @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  id: String! @primaryKey
  title: String
  author: String
}

type RenamedPost @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}]) @refersTo(name: "post")
{
  id: String! @primaryKey
  title: String
  author: String
}

type RenamedComment @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}]) @refersTo(name: "comment")
{
  id: String! @primaryKey
  title: String
  author: String
}"
`;

exports[`custom operations for a.combine schema a ddb and sql schemas combine without issues 1`] = `
"type A @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  field: String
}
type B @model @auth(rules: [{allow: public, provider: apiKey}])
{
  field: String
}"
`;

exports[`custom operations for a.combine schema combining two schemas with custom mutation results in customTypes and customOperations that intersect the separate schemas 1`] = `
"type A @model @auth(rules: [{allow: public, provider: apiKey}])
{
  fieldA: String
}

type LikePostResult @aws_api_key
{
  likes: Int!
}

type Mutation {
  likePost(postId: String!): LikePostResult @function(name: "likePost") @auth(rules: [{allow: public, provider: apiKey}])
}
type B @model @auth(rules: [{allow: public, provider: apiKey}])
{
  fieldB: String
}

type DislikePostResult @aws_api_key
{
  likes: Int!
}

type Mutation {
  dislikePost(postId: String!): DislikePostResult @function(name: "dislikePost") @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`custom operations for a.combine schema two schemas combine without issues 1`] = `
"type A @model @auth(rules: [{allow: public, provider: apiKey}])
{
  field: String
}
type B @model @auth(rules: [{allow: public, provider: apiKey}])
{
  field: String
}"
`;

exports[`schema auth rules allows custom 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: custom}])
{
  field: String
}",
}
`;

exports[`schema auth rules allows groupDefinedIn 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: owner, ownerField: "someField"}])
{
  field: String
}",
}
`;

exports[`schema auth rules allows groupsDefinedIn 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: groups, groupsField: "someField"}])
{
  field: String
}",
}
`;

exports[`schema auth rules allows guest 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: public, provider: iam}])
{
  field: String
}",
}
`;

exports[`schema auth rules allows multiple entries 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: public, provider: apiKey},
  {allow: private}])
{
  field: String
}",
}
`;

exports[`schema auth rules allows multipleOwners 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  field: String
}",
}
`;

exports[`schema auth rules allows owner 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  field: String
}",
}
`;

exports[`schema auth rules allows private 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: private}])
{
  field: String
}",
}
`;

exports[`schema auth rules allows public 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: public, provider: apiKey}])
{
  field: String
}",
}
`;

exports[`schema auth rules allows specificGroups 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: groups, groups: ["a", "b"]}])
{
  field: String
}",
}
`;

exports[`schema auth rules can define public auth with no provider 1`] = `
"type A @model @auth(rules: [{allow: public, provider: apiKey}])
{
  field: String
}"
`;

exports[`schema auth rules disallows specificGroup 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: groups, groups: ["group"]}])
{
  field: String
}",
}
`;

exports[`schema auth rules do not pull out custom operations 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type Post @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  title: String
}

type Mutation {
  likePost(postId: String): Post @function(name: "myFunc") @auth(rules: [{allow: owner, ownerField: "owner"}])
}

type Query {
  getLikedPost: Post @function(name: "myFunc") @auth(rules: [{allow: owner, ownerField: "owner"}])
}

type Subscription {
  onLikePost: Post @function(name: "myFunc") @aws_subscribe(mutations: ["likePost"]) @auth(rules: [{allow: owner, ownerField: "owner"}])
}",
}
`;

exports[`schema auth rules global public auth - multiple models 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: public, provider: apiKey}])
{
  field: String
}

type B @model @auth(rules: [{allow: public, provider: apiKey}])
{
  field: AWSJSON
}

type C @model @auth(rules: [{allow: public, provider: apiKey}])
{
  d: D @hasOne(references: ["cId"])
}

type D @model @auth(rules: [{allow: public, provider: apiKey}])
{
  can: Int
  you: Boolean
  tell: Float
  i: AWSDate
  am: AWSIPAddress
  getting: AWSURL
  tired: DTired
  cId: ID
  c: C @belongsTo(references: ["cId"])
}

enum DTired {
  ?
}",
}
`;

exports[`schema auth rules prefers model auth over global auth owner auth on model vs owner auth on schema 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: owner, ownerField: "modelOwnerField"}])
{
  field: String
}",
}
`;

exports[`schema auth rules prefers model auth over global auth owner auth on model vs public auth on schema 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  field: String
}",
}
`;

exports[`schema auth rules prefers model auth over global auth public auth on model vs owner auth on schema 1`] = `
{
  "customSqlDataSourceStrategies": [],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type A @model @auth(rules: [{allow: public, provider: apiKey}])
{
  field: String
}",
}
`;

exports[`schema generation with relationships 1`] = `
"type BoringParent @model @auth(rules: [{allow: public, provider: apiKey}])
{
  childNormal: BoringChild @hasOne(references: ["boringParentId"])
  childReciprocal: BoringReciprocalChild @hasOne(references: ["boringParentId"])
  childHasManyNormal: [BoringHasManyChild] @hasMany(references: ["boringParentId"])
  childHasManyReciprocal: [ReciprocalHasManyChild] @hasMany(references: ["boringParentId"])
}

type BoringChild @model @auth(rules: [{allow: public, provider: apiKey}])
{
  value: String
  boringParentId: ID
  boringParent: BoringParent @belongsTo(references: ["boringParentId"])
}

type BoringReciprocalChild @model @auth(rules: [{allow: public, provider: apiKey}])
{
  value: String
  boringParentId: ID
  parent: BoringParent @belongsTo(references: ["boringParentId"])
}

type BoringHasManyChild @model @auth(rules: [{allow: public, provider: apiKey}])
{
  value: String
  boringParentId: ID
  parent: BoringParent @belongsTo(references: ["boringParentId"])
}

type ReciprocalHasManyChild @model @auth(rules: [{allow: public, provider: apiKey}])
{
  value: String
  boringParentId: ID
  parent: BoringParent @belongsTo(references: ["boringParentId"])
}

type CPKParent @model @auth(rules: [{allow: public, provider: apiKey}])
{
  CPKParentIdFieldA: ID! @primaryKey(sortKeyFields: ["CPKParentIdFieldB"])
  CPKParentIdFieldB: ID!
  childNormal: CPKChild @hasOne(references: ["CPKParentIdFieldA","CPKParentIdFieldB"])
  childReciprocal: CPKReciprocalChild @hasOne(references: ["CPKParentIdFieldA","CPKParentIdFieldB"])
  childHasManyNormal: [CPKHasManyChild] @hasMany(references: ["CPKParentIdFieldA","CPKParentIdFieldB"])
  childHasManyReciprocal: [CPKReciprocalHasManyChild] @hasMany(references: ["CPKParentIdFieldA","CPKParentIdFieldB"])
}

type CPKChild @model @auth(rules: [{allow: public, provider: apiKey}])
{
  value: String
  CPKChildIdFieldA: ID! @primaryKey(sortKeyFields: ["CPKChildIdFieldB"])
  CPKChildIdFieldB: ID!
  CPKParentIdFieldA: ID
  CPKParentIdFieldB: ID
  cpkParent: CPKParent @belongsTo(references: ["CPKParentIdFieldA","CPKParentIdFieldB"])
}

type CPKReciprocalChild @model @auth(rules: [{allow: public, provider: apiKey}])
{
  CPKReciprocalChildIdFieldA: ID! @primaryKey(sortKeyFields: ["CPKReciprocalChildIdFieldB"])
  CPKReciprocalChildIdFieldB: ID!
  CPKParentIdFieldA: ID
  CPKParentIdFieldB: ID
  cpkParent: CPKParent @belongsTo(references: ["CPKParentIdFieldA","CPKParentIdFieldB"])
  value: String
}

type CPKHasManyChild @model @auth(rules: [{allow: public, provider: apiKey}])
{
  value: String
  CPKHasManyChildIdFieldA: ID! @primaryKey(sortKeyFields: ["CPKHasManyChildIdFieldB"])
  CPKHasManyChildIdFieldB: ID!
  CPKParentIdFieldA: ID
  CPKParentIdFieldB: ID
  cpkParent: CPKParent @belongsTo(references: ["CPKParentIdFieldA","CPKParentIdFieldB"])
}

type CPKReciprocalHasManyChild @model @auth(rules: [{allow: public, provider: apiKey}])
{
  CPKReciprocalHasManyChildIdFieldA: ID! @primaryKey(sortKeyFields: ["CPKReciprocalHasManyChildIdFieldB"])
  CPKReciprocalHasManyChildIdFieldB: ID!
  value: String
  CPKParentIdFieldA: ID!
  CPKParentIdFieldB: ID!
  parent: CPKParent @belongsTo(references: ["CPKParentIdFieldA","CPKParentIdFieldB"])
}"
`;
