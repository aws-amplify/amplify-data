// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RDSModelSchema .relationships() modifier generates expected schema for bidirectional hasMany<->belongsTo 1`] = `
"type Blog @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
  description: String
  childPosts: [Post] @hasMany(references: ["parentBlogId"])
}

type Post @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
  content: String
  parentBlogId: String
  parentBlog: Blog @belongsTo(references: ["parentBlogId"])
}"
`;

exports[`RDSModelSchema .relationships() modifier generates expected schema for bidirectional hasOne<->belongsTo 1`] = `
"type Account @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  email: String!
  supplierId: String
  supplier: Supplier @belongsTo(references: ["supplierId"])
}

type Supplier @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  name: String!
  account: Account @hasOne(references: ["supplierIds"])
}"
`;

exports[`RDSModelSchema .relationships() modifier generates expected schema for unidirectional belongsTo 1`] = `
"type Account @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  email: String!
  supplierId: String
  supplier: Supplier @belongsTo(references: ["supplierId"])
}

type Supplier @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  name: String!
}"
`;

exports[`RDSModelSchema .relationships() modifier generates expected schema for unidirectional hasMany 1`] = `
"type Blog @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
  description: String
  childPosts: [Post] @hasMany(references: ["parentBlogId"])
}

type Post @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
  content: String
  parentBlogId: String
}"
`;

exports[`RDSModelSchema .relationships() modifier generates expected schema for unidirectional hasOne 1`] = `
"type Account @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  email: String!
  supplierId: String
}

type Supplier @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  name: String!
  account: Account @hasOne(references: ["supplierId"])
}"
`;
