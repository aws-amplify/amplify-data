// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CustomOperation transform dynamo schema Custom Mutation w required arg and enum 1`] = `
"type Post @model @auth(rules: [{allow: private}])
{
  title: String
}

type Mutation {
  likePost(postId: String!, reactionType: LikePostReactionType): Post 
}"
`;

exports[`CustomOperation transform dynamo schema Custom Mutation w string function reference & auth 1`] = `
"type Post @model @auth(rules: [{allow: private}])
{
  title: String
}

type Mutation {
  likePost(postId: String!): Post @function(name: "myFunc") @auth(rules: [{allow: private}])
}"
`;

exports[`CustomOperation transform dynamo schema Custom Mutation w string function reference 1`] = `
"type Post @model @auth(rules: [{allow: private}])
{
  title: String
}

type Mutation {
  likePost(postId: String!): Post @function(name: "myFunc") @auth(rules: [{allow: private}])
}"
`;

exports[`CustomOperation transform dynamo schema Custom mutation w inline boolean return type 1`] = `
"type Mutation {
  likePost(postId: String!): Boolean 
}"
`;

exports[`CustomOperation transform dynamo schema Custom mutation w inline custom return type 1`] = `
"type LikePostReturnType 
{
  stringField: String
  intField: Int
  floatField: Float
  boolField: Boolean
  datetimeField: AWSDateTime
  jsonField: AWSJSON
}

type Mutation {
  likePost(postId: String!): LikePostReturnType 
}"
`;

exports[`CustomOperation transform dynamo schema Custom mutation w inline datetime return type 1`] = `
"type Mutation {
  likePost(postId: String!): AWSDateTime 
}"
`;

exports[`CustomOperation transform dynamo schema Custom mutation w inline float return type 1`] = `
"type Mutation {
  likePost(postId: String!): Float 
}"
`;

exports[`CustomOperation transform dynamo schema Custom mutation w inline integer return type 1`] = `
"type Mutation {
  likePost(postId: String!): Int 
}"
`;

exports[`CustomOperation transform dynamo schema Custom mutation w inline json return type 1`] = `
"type Mutation {
  likePost(postId: String!): AWSJSON 
}"
`;

exports[`CustomOperation transform dynamo schema Custom mutation w inline string return type 1`] = `
"type Mutation {
  likePost(postId: String!): String 
}"
`;

exports[`CustomOperation transform dynamo schema Custom query w inline boolean return type 1`] = `
"type Query {
  getPostDetails(postId: String!): Boolean 
}"
`;

exports[`CustomOperation transform dynamo schema Custom query w inline custom enum return type 1`] = `
"enum GetPostStatusReturnType {
  draft
  pending
  approved
}

type Query {
  getPostStatus(postId: String!): GetPostStatusReturnType 
}"
`;

exports[`CustomOperation transform dynamo schema Custom query w inline custom return type 1`] = `
"type GetPostDetailsReturnType 
{
  stringField: String
  intField: Int
  floatField: Float
  boolField: Boolean
  datetimeField: AWSDateTime
  jsonField: AWSJSON
}

type Query {
  getPostDetails(postId: String!): GetPostDetailsReturnType 
}"
`;

exports[`CustomOperation transform dynamo schema Custom query w inline datetime return type 1`] = `
"type Query {
  getPostDetails(postId: String!): AWSDateTime 
}"
`;

exports[`CustomOperation transform dynamo schema Custom query w inline float return type 1`] = `
"type Query {
  getPostDetails(postId: String!): Float 
}"
`;

exports[`CustomOperation transform dynamo schema Custom query w inline integer return type 1`] = `
"type Query {
  getPostDetails(postId: String!): Int 
}"
`;

exports[`CustomOperation transform dynamo schema Custom query w inline json return type 1`] = `
"type Query {
  getPostDetails(postId: String!): AWSJSON 
}"
`;

exports[`CustomOperation transform dynamo schema Custom query w inline string return type 1`] = `
"type Query {
  getPostDetails(postId: String!): String 
}"
`;

exports[`CustomOperation transform dynamo schema Custom query w referenced enum return type 1`] = `
"enum PostStatus {
  draft
  pending
  approved
}

type Query {
  getPostStatus(postId: String!): PostStatus 
}"
`;

exports[`CustomOperation transform dynamo schema Schema w model, custom query, mutation, and subscription 1`] = `
"type Post @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String
}

type Mutation {
  likePost(postId: String): Post @function(name: "myFunc") @auth(rules: [{allow: public, provider: apiKey}])
}

type Query {
  getLikedPost: Post @function(name: "myFunc") @auth(rules: [{allow: public, provider: apiKey}])
}

type Subscription {
  onLikePost: Post @function(name: "myFunc") @aws_subscribe(mutations: ["likePost"]) @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`CustomOperation transform dynamo schema Schema w model, custom query, mutation, and subscription and ref of custom type with array modifier 1`] = `
"type PostCustomType @aws_api_key
{
  title: String
}

type Mutation {
  listPosts: [PostCustomType] @function(name: "myFunc") @auth(rules: [{allow: public, provider: apiKey}])
}

type Query {
  getLikedPost: [PostCustomType] @function(name: "myFunc") @auth(rules: [{allow: public, provider: apiKey}])
}

type Subscription {
  onCreatePost: [PostCustomType] @function(name: "myFunc") @aws_subscribe(mutations: ["listPosts"]) @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`CustomOperation transform dynamo schema Schema w model, custom query, mutation, and subscription and ref of model with array modifier 1`] = `
"type Post @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String
}

type Mutation {
  listPosts: [Post] @function(name: "myFunc") @auth(rules: [{allow: public, provider: apiKey}])
}

type Query {
  getLikedPost: [Post] @function(name: "myFunc") @auth(rules: [{allow: public, provider: apiKey}])
}

type Subscription {
  onCreatePost: Post @function(name: "myFunc") @aws_subscribe(mutations: ["createPost"]) @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`CustomOperation transform dynamo schema custom subscriptions Custom subscription where .for() resource has a CustomType return type 1`] = `
"type CreateCustomTypePostReturnType @aws_api_key
{
  title: String!
}

type Mutation {
  createCustomTypePost: CreateCustomTypePostReturnType @function(name: "createCustomTypePost") @auth(rules: [{allow: public, provider: apiKey}])
}

type Subscription {
  onLikeCustomTypePost: CreateCustomTypePostReturnType @function(name: "onCreateCustomTypePost") @aws_subscribe(mutations: ["createCustomTypePost"]) @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`CustomOperation transform dynamo schema custom subscriptions Custom subscription where .for() resource has a scalar return type 1`] = `
"type Mutation {
  likePost: String @function(name: "likePost") @auth(rules: [{allow: public, provider: apiKey}])
}

type Subscription {
  onLikePost: String @function(name: "onLikePost") @aws_subscribe(mutations: ["likePost"]) @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`CustomOperation transform dynamo schema custom subscriptions Custom subscription with Model source & custom mutation source 1`] = `
"type Post @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String
}

type Mutation {
  likePost(postId: String): Post @function(name: "likePost") @auth(rules: [{allow: public, provider: apiKey}])
}

type Subscription {
  onLikeOrUpdatePost: Post @function(name: "myFunc") @aws_subscribe(mutations: ["likePost", "updatePost"]) @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`CustomOperation transform dynamo schema custom subscriptions Custom subscription with custom mutation source 1`] = `
"type Post @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String
}

type Mutation {
  likePost(postId: String): Post @function(name: "likePost") @auth(rules: [{allow: public, provider: apiKey}])
}

type Subscription {
  onLikePost: Post @function(name: "myFunc") @aws_subscribe(mutations: ["likePost"]) @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`CustomOperation transform dynamo schema custom subscriptions Custom subscription with model multiple mutation sources 1`] = `
"type Post @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String
}

type Subscription {
  onAnyPostMutation: Post @function(name: "myFunc") @aws_subscribe(mutations: ["createPost", "updatePost", "deletePost"]) @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`CustomOperation transform dynamo schema custom subscriptions Custom subscription with model single mutation source 1`] = `
"type Post @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String
}

type Subscription {
  onCreatePost: Post @function(name: "myFunc") @aws_subscribe(mutations: ["createPost"]) @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`CustomOperation transform dynamo schema handlers a.handler.custom a.handler.custom with auth and model ref works 1`] = `
"type Post @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String
}

type GetPostDetailsReturnType @aws_api_key
{
  
}

type Query {
  getPostDetails: GetPostDetailsReturnType @aws_api_key
}"
`;

exports[`CustomOperation transform dynamo schema handlers a.handler.custom a.handler.custom with auth works 1`] = `
"type GetPostDetailsReturnType @aws_cognito_user_pools(cognito_groups: ["groupA", "groupB"])
{
  
}

type Query {
  getPostDetails: GetPostDetailsReturnType @aws_cognito_user_pools(cognito_groups: ["groupA", "groupB"])
}"
`;

exports[`CustomOperation transform dynamo schema handlers a.handler.custom a.handler.custom with multiple supported auth modes 1`] = `
"type Post @model @auth(rules: [{allow: private}])
{
  title: String
}

type Query {
  customQuery: String @aws_cognito_user_pools @aws_cognito_user_pools(cognito_groups: ["groupA", "groupB"])
}"
`;

exports[`CustomOperation transform dynamo schema handlers a.handler.function defineFunction 1`] = `
"type GetPostDetailsReturnType @aws_cognito_user_pools
{
  
}

type Query {
  getPostDetails: GetPostDetailsReturnType @function(name: "FnGetPostDetails") @auth(rules: [{allow: private}])
}"
`;

exports[`CustomOperation transform dynamo schema handlers a.handler.function pipeline / mix 1`] = `
"type GetPostDetailsReturnType @aws_cognito_user_pools
{
  
}

type Query {
  getPostDetails: GetPostDetailsReturnType @function(name: "myFunc") @function(name: "FnGetPostDetails2") @function(name: "FnGetPostDetails3") @function(name: "myFunc2") @auth(rules: [{allow: private}])
}"
`;

exports[`CustomOperation transform dynamo schema handlers a.handler.function string 1`] = `
"type GetPostDetailsReturnType @aws_cognito_user_pools
{
  
}

type Query {
  getPostDetails: GetPostDetailsReturnType @function(name: "myFunc") @auth(rules: [{allow: private}])
}"
`;

exports[`CustomOperation transform dynamo schema handlers a.handler.inlineSql escapes quotes 1`] = `
"type GetPostDetailsReturnType @aws_cognito_user_pools
{
  
}

type Query {
  getPostDetails: GetPostDetailsReturnType @sql(statement: "SELECT * from TESTTABLE status = \\"active\\";") @auth(rules: [{allow: private}])
}"
`;

exports[`CustomOperation transform dynamo schema handlers a.handler.inlineSql works 1`] = `
{
  "customSqlDataSourceStrategies": [
    {
      "fieldName": "getPostDetails",
      "typeName": "Query",
    },
  ],
  "functionSchemaAccess": [],
  "functionSlots": [],
  "jsFunctions": [],
  "lambdaFunctions": {},
  "schema": "type GetPostDetailsReturnType @aws_cognito_user_pools
{
  
}

type Query {
  getPostDetails: GetPostDetailsReturnType @sql(statement: "SELECT * from TESTTABLE;") @auth(rules: [{allow: private}])
}",
}
`;

exports[`CustomOperation transform dynamo schema handlers a.handler.sqlReference works 1`] = `
"type GetPostDetailsReturnType @aws_cognito_user_pools
{
  
}

type Query {
  getPostDetails: GetPostDetailsReturnType @sql(reference: "./testQueryName") @auth(rules: [{allow: private}])
}"
`;

exports[`CustomOperation transform sql schema Schema w model, custom query, mutation, and subscription 1`] = `
"type Post @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String
}

type Mutation {
  likePost(postId: String): Post @function(name: "myFunc") @auth(rules: [{allow: public, provider: apiKey}])
}

type Query {
  getLikedPost: Post @function(name: "myFunc") @auth(rules: [{allow: public, provider: apiKey}])
}

type Subscription {
  onLikePost: Post @function(name: "myFunc") @aws_subscribe(mutations: ["likePost"]) @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`CustomOperation transform sql schema schema.add* will not accept custom operations of incompatible types 1`] = `
"type Post @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String
}

type Mutation {
  likePost(postId: String): Post @function(name: "myFunc") @auth(rules: [{allow: public, provider: apiKey}])
}

type Query {
  getLikedPost: Post @function(name: "myFunc") @auth(rules: [{allow: public, provider: apiKey}])
}

type Subscription {
  onLikePost: Post @function(name: "myFunc") @aws_subscribe(mutations: ["updatePost"]) @auth(rules: [{allow: public, provider: apiKey}])
  onCreatePost: Post @function(name: "myFunc") @aws_subscribe(mutations: ["createPost"]) @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`custom operations + custom type auth inheritance implicit custom type inherits auth rules from referencing op 1`] = `
"type MyQueryReturnType @aws_api_key
{
  fieldA: String
  fieldB: Int
}

type Query {
  myQuery: MyQueryReturnType @function(name: "myFn") @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`custom operations + custom type auth inheritance op returns top-level custom type with 1 auth mode 1`] = `
"type QueryReturn @aws_api_key
{
  fieldA: String
  fieldB: Int
}

type Query {
  myQuery: QueryReturn @function(name: "myFn") @auth(rules: [{allow: public, provider: apiKey}])
}"
`;

exports[`custom operations + custom type auth inheritance op returns top-level custom type with all supported auth modes 1`] = `
"type QueryReturn @aws_api_key @aws_cognito_user_pools @aws_cognito_user_pools(cognito_groups: ["admin", "superAdmin"]) @aws_iam
{
  fieldA: String
  fieldB: Int
}

type Query {
  myQuery: QueryReturn @function(name: "myFn") @auth(rules: [{allow: public, provider: apiKey},
  {allow: private},
  {allow: groups, groups: ["admin", "superAdmin"]},
  {allow: public, provider: iam},
  {allow: private, provider: iam}])
}"
`;

exports[`custom operations + custom type auth inheritance top-level custom type inherits combined auth rules from referencing ops 1`] = `
"type QueryReturn @aws_cognito_user_pools @aws_api_key
{
  fieldA: String
  fieldB: Int
}

type Query {
  myMutation: QueryReturn @function(name: "myFn") @auth(rules: [{allow: private}])
  myQuery: QueryReturn @function(name: "myFn") @auth(rules: [{allow: public, provider: apiKey}])
}"
`;
