// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default() to GQL mapping should map .default() to \`@default\` 1`] = `
"type Album @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  trackNumber: Int @default
  title: String
}"
`;

exports[`default() to GQL mapping should map .default(val) to \`@default(value: val)\` 1`] = `
"type Song @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String @default(value: "Little Wing")
}"
`;

exports[`default() to GQL mapping should map generated (\`.default()\`) identifiers to @primaryKey @default 1`] = `
"type Song @model(timestamps: null) @auth(rules: [{allow: public, provider: apiKey}])
{
  id: Int! @primaryKey @default
  title: String
}"
`;

exports[`disableOperations coarse grained op takes precedence over fine-grained 1`] = `
"type widget @model(mutations:null) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
}"
`;

exports[`disableOperations dupes are ignored 1`] = `
"type widget @model(mutations:null) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
}"
`;

exports[`disableOperations exhaustive coarse-grained 1`] = `
"type widget @model(queries:null,mutations:null,subscriptions:null) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
}"
`;

exports[`disableOperations exhaustive fine-grained 1`] = `
"type widget @model(queries:{get:null,list:null},mutations:{create:null,update:null,delete:null},subscriptions:{onCreate:null,onUpdate:null,onDelete:null}) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
}"
`;

exports[`disableOperations passes expected @model attributes for coarse-grained disable op 1`] = `
"type widget @model(mutations:null,subscriptions:null) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
}"
`;

exports[`disableOperations passes expected @model attributes for fine-grained disable op 1`] = `
"type widget @model(queries:{get:null},mutations:{update:null,delete:null},subscriptions:{onUpdate:null,onDelete:null}) @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
}"
`;

exports[`model auth rules can chain off of inField rules 1`] = `
"type widget @model @auth(rules: [{allow: owner, operations: [create, read], ownerField: "customOwnerField"}])
{
  title: String!
}"
`;

exports[`model auth rules can chain off of multi-owner inField rules 1`] = `
"type widget @model @auth(rules: [{allow: owner, operations: [create, read], ownerField: "customOwnerField"}])
{
  title: String!
}"
`;

exports[`model auth rules can create a "multiple owners" rule on an existing field 1`] = `
"type widget @model @auth(rules: [{allow: owner, ownerField: "authors"}])
{
  title: String!
  authors: [String!]!
}"
`;

exports[`model auth rules can create a "multiple owners" rule on an implied (auto-created) field 1`] = `
"type widget @model @auth(rules: [{allow: owner, ownerField: "authors"}])
{
  title: String!
}"
`;

exports[`model auth rules can create a dynamic multi groups rule 1`] = `
"type widget @model @auth(rules: [{allow: groups, operations: [read], groupsField: "sharedWithGroups"}])
{
  title: String!
}"
`;

exports[`model auth rules can create a dynamic multi groups rule with withClaimIn 1`] = `
"type widget @model @auth(rules: [{allow: groups, operations: [read], groupsField: "sharedWithGroups", groupClaim: "someClaimsField"}])
{
  title: String!
}"
`;

exports[`model auth rules can create a dynamic singular groups rule 1`] = `
"type widget @model @auth(rules: [{allow: groups, groupsField: "businessUnitOwner"}])
{
  title: String!
}"
`;

exports[`model auth rules can create a dynamic singular groups rule with withClaimIn 1`] = `
"type widget @model @auth(rules: [{allow: groups, groupsField: "businessUnitOwner", groupClaim: "someClaimsField"}])
{
  title: String!
}"
`;

exports[`model auth rules can create a static [Admins, Moderators] groups rule 1`] = `
"type widget @model @auth(rules: [{allow: groups, groups: ["Admins", "Moderators"]}])
{
  title: String!
}"
`;

exports[`model auth rules can create a static Admins group rule 1`] = `
"type widget @model @auth(rules: [{allow: groups, groups: ["Admins"]}])
{
  title: String!
}"
`;

exports[`model auth rules can deduplicate authorization prevent errors from auth defined by multiple custom operations 1`] = `
"type CustomType @aws_api_key @aws_cognito_user_pools @aws_iam @aws_cognito_user_pools(cognito_groups: ["Admin", "User"])
{
  id: String!
  name: String!
}

type Query {
  getSomething(arg1: String!): [CustomType!]! @function(name: "exampleFunc") @auth(rules: [{allow: groups, groups: ["Admin"]},
  {allow: public, provider: apiKey},
  {allow: private},
  {allow: public, provider: iam},
  {allow: private, provider: iam}])
  getSomething2(arg1: String!): [CustomType!]! @function(name: "exampleFunc") @auth(rules: [{allow: groups, groups: ["Admin", "User"]},
  {allow: public, provider: apiKey}])
  getSomething3(arg1: String!): [CustomType!]! @function(name: "exampleFunc") @auth(rules: [{allow: groups, groups: ["Admin", "User"]}])
}"
`;

exports[`model auth rules can define a custom authorization rule 1`] = `
"type Widget @model @auth(rules: [{allow: custom}])
{
  title: String!
}"
`;

exports[`model auth rules can define custom auth rule for operations create 1`] = `
"type widget @model @auth(rules: [{allow: custom, operations: [create]}])
{
  title: String!
}"
`;

exports[`model auth rules can define custom auth rule for operations create,read,listen 1`] = `
"type widget @model @auth(rules: [{allow: custom, operations: [create, read, listen]}])
{
  title: String!
}"
`;

exports[`model auth rules can define custom auth rule for operations create,read,update,delete 1`] = `
"type widget @model @auth(rules: [{allow: custom, operations: [create, read, update, delete]}])
{
  title: String!
}"
`;

exports[`model auth rules can define custom auth rule for operations delete 1`] = `
"type widget @model @auth(rules: [{allow: custom, operations: [delete]}])
{
  title: String!
}"
`;

exports[`model auth rules can define custom auth rule for operations get 1`] = `
"type widget @model @auth(rules: [{allow: custom, operations: [get]}])
{
  title: String!
}"
`;

exports[`model auth rules can define custom auth rule for operations list 1`] = `
"type widget @model @auth(rules: [{allow: custom, operations: [list]}])
{
  title: String!
}"
`;

exports[`model auth rules can define custom auth rule for operations listen 1`] = `
"type widget @model @auth(rules: [{allow: custom, operations: [listen]}])
{
  title: String!
}"
`;

exports[`model auth rules can define custom auth rule for operations read 1`] = `
"type widget @model @auth(rules: [{allow: custom, operations: [read]}])
{
  title: String!
}"
`;

exports[`model auth rules can define custom auth rule for operations search 1`] = `
"type widget @model @auth(rules: [{allow: custom, operations: [search]}])
{
  title: String!
}"
`;

exports[`model auth rules can define custom auth rule for operations sync 1`] = `
"type widget @model @auth(rules: [{allow: custom, operations: [sync]}])
{
  title: String!
}"
`;

exports[`model auth rules can define custom auth rule for operations update 1`] = `
"type widget @model @auth(rules: [{allow: custom, operations: [update]}])
{
  title: String!
}"
`;

exports[`model auth rules can define multiple owner auth with owner field spec on a string-compatible array field 1`] = `
"type widget @model @auth(rules: [{allow: owner, ownerField: "authorId"}])
{
  title: String!
  authorId: [ID]
}"
`;

exports[`model auth rules can define owner auth with no provider 1`] = `
"type widget @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  title: String!
}"
`;

exports[`model auth rules can define owner auth with owner field spec 1`] = `
"type widget @model @auth(rules: [{allow: owner, ownerField: "title"}])
{
  title: String!
}"
`;

exports[`model auth rules can define owner auth with owner field spec on a string-compatible field 1`] = `
"type widget @model @auth(rules: [{allow: owner, ownerField: "authorId"}])
{
  title: String!
  authorId: ID
}"
`;

exports[`model auth rules can define private auth with no provider 1`] = `
"type widget @model @auth(rules: [{allow: private}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool for operations create 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam, operations: [create]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool for operations create,read,listen 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam, operations: [create, read, listen]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool for operations create,read,update,delete 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam, operations: [create, read, update, delete]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool for operations delete 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam, operations: [delete]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool for operations get 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam, operations: [get]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool for operations list 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam, operations: [list]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool for operations listen 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam, operations: [listen]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool for operations read 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam, operations: [read]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool for operations search 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam, operations: [search]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool for operations sync 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam, operations: [sync]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider identityPool for operations update 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: iam, operations: [update]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc for operations create 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc, operations: [create]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc for operations create,read,listen 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc, operations: [create, read, listen]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc for operations create,read,update,delete 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc, operations: [create, read, update, delete]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc for operations delete 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc, operations: [delete]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc for operations get 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc, operations: [get]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc for operations list 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc, operations: [list]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc for operations listen 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc, operations: [listen]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc for operations read 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc, operations: [read]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc for operations search 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc, operations: [search]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc for operations sync 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc, operations: [sync]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider oidc for operations update 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: oidc, operations: [update]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools for operations create 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools, operations: [create]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools for operations create,read,listen 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools, operations: [create, read, listen]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools for operations create,read,update,delete 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools, operations: [create, read, update, delete]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools for operations delete 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools, operations: [delete]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools for operations get 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools, operations: [get]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools for operations list 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools, operations: [list]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools for operations listen 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools, operations: [listen]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools for operations read 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools, operations: [read]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools for operations search 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools, operations: [search]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools for operations sync 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools, operations: [sync]}])
{
  title: String!
}"
`;

exports[`model auth rules can define private with with provider userPools for operations update 1`] = `
"type widget @model @auth(rules: [{allow: private, provider: userPools, operations: [update]}])
{
  title: String!
}"
`;

exports[`model auth rules can define public auth with no provider 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String!
}"
`;

exports[`model auth rules can merge group authorization to allow groups to be defined by multiple custom operations 1`] = `
"type ExampleModel @model @auth(rules: [{allow: groups, groups: ["Admin2", "User2"]}])
{
  name: [CustomType!]! @auth(rules: [{allow: groups, groups: ["Admin3", "User3"]}])
  description: String @auth(rules: [{allow: groups, groups: ["Admin3"]}])
}

type CustomType @aws_cognito_user_pools(cognito_groups: ["Admin", "User"])
{
  id: String!
  name: String!
}

type Query {
  exampleAdminAndUserQuery(arg1: String!): [CustomType!]! @function(name: "exampleFunc") @auth(rules: [{allow: groups, groups: ["Admin", "User"]}])
  exampleAdminOnlyQuery(arg1: String!): [CustomType!]! @function(name: "exampleFunc") @auth(rules: [{allow: groups, groups: ["Admin"]}])
}"
`;

exports[`model auth rules can specify an owner identityClaim 1`] = `
"type widget @model @auth(rules: [{allow: owner, ownerField: "owner", identityClaim: "user_id"}])
{
  title: String!
}"
`;

exports[`model auth rules can specify operations  1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey, operations: [create, read]}])
{
  title: String!
}"
`;

exports[`model auth rules duplicate field validation does not issue errors for \`identifier()\` explicit \`customId: string\` field 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  customId: String! @primaryKey
}"
`;

exports[`model auth rules duplicate field validation does not issue errors for \`identifier()\` explicit \`id: ID\` field 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  id: ID! @primaryKey
}"
`;

exports[`model auth rules duplicate field validation does not issue errors for \`identifier()\` explicit \`id: string\` field 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  id: String! @primaryKey
}"
`;

exports[`model auth rules duplicate field validation does not issue errors for \`identifier()\` explicit multi-field mixed types PK 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  idFieldA: String! @primaryKey(sortKeyFields: ["idFieldB"])
  idFieldB: Int!
}"
`;

exports[`model auth rules duplicate field validation does not issue errors for \`identifier()\` explicit multi-field string type PK 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  idFieldA: String! @primaryKey(sortKeyFields: ["idFieldB"])
  idFieldB: String!
}"
`;

exports[`model auth rules includes auth from fields 1`] = `
"type widget @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  id: ID! @primaryKey
  title: String! @auth(rules: [{allow: owner, operations: [create, read], ownerField: "customOwner"}])
}"
`;

exports[`model auth rules includes auth from related model fields 1`] = `
"type factory @model @auth(rules: [{allow: public, provider: apiKey}])
{
  name: String
  widgets: [widget] @hasMany(references: ["factoryId"])
}

type widget @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  id: ID! @primaryKey
  factoryId: ID
  parent: factory @belongsTo(references: ["factoryId"]) @auth(rules: [{allow: owner, operations: [create, read], ownerField: "customOwner"}])
}"
`;

exports[`secondary indexes generates a primary key AND secondary index annotation with attributes 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String! @primaryKey @index(name: "myGSI", sortKeyFields: ["description", "timestamp"], queryField: "byTitleDescTs")
  description: String!
  timestamp: Int!
}"
`;

exports[`secondary indexes generates a secondary index annotation 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String! @index(queryField: "listWidgetByTitle")
}"
`;

exports[`secondary indexes generates a secondary index annotation with attributes - custom queryField 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String! @index(name: "myGSI", sortKeyFields: ["description", "timestamp"], queryField: "byTitleDescTs")
  description: String!
  timestamp: Int!
}"
`;

exports[`secondary indexes generates a secondary index annotation with attributes - default 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String! @index(name: "myGSI", sortKeyFields: ["description", "timestamp"], queryField: "listWidgetByTitleAndDescriptionAndTimestamp")
  description: String!
  timestamp: Int!
}"
`;

exports[`secondary indexes generates multiple secondary index annotations on the same field 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String! @index(queryField: "listWidgetByTitle") @index(sortKeyFields: ["timestamp"], queryField: "listWidgetByTitleAndTimestamp") @index(name: "myGSI", sortKeyFields: ["description", "timestamp"], queryField: "byTitleDescTs")
  description: String!
  timestamp: Int!
}"
`;

exports[`secondary indexes generates secondary index annotations on different fields 1`] = `
"type widget @model @auth(rules: [{allow: public, provider: apiKey}])
{
  title: String! @index(queryField: "listWidgetByTitle")
  description: String! @index(sortKeyFields: ["timestamp"], queryField: "listWidgetByDescriptionAndTimestamp")
  timestamp: Int! @index(sortKeyFields: ["description"], queryField: "byTimeStampDesc")
}"
`;
