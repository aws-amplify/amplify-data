// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AI Conversation Routes Conversations Create a conversation 1`] = `
[
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "mutation($input: CreateConversationChatBotInput!) { createConversationChatBot(input: $input) { id name metadata createdAt updatedAt owner } }",
      "variables": {
        "input": {
          "metadata": "{"arbitrary":"data"}",
          "name": "Test Conversation",
        },
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "1",
        "category": "ai",
      },
    },
    {},
  ],
]
`;

exports[`AI Conversation Routes Conversations Get a conversation 1`] = `
[
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "query($id: ID!) { getConversationChatBot(id: $id) { id name metadata createdAt updatedAt owner } }",
      "variables": {
        "id": "conversation-id",
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "2",
        "category": "ai",
      },
    },
    {},
  ],
]
`;

exports[`AI Conversation Routes Conversations List conversations 1`] = `
[
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "query($filter: ModelConversationChatBotFilterInput,$limit: Int,$nextToken: String) { listConversationChatBots(filter: $filter,limit: $limit,nextToken: $nextToken) { items { id name metadata createdAt updatedAt owner } nextToken __typename } }",
      "variables": {},
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "3",
        "category": "ai",
      },
    },
    {},
  ],
]
`;

exports[`AI Conversation Routes Conversations Paginate conversations 1`] = `
[
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "query($filter: ModelConversationChatBotFilterInput,$limit: Int,$nextToken: String) { listConversationChatBots(filter: $filter,limit: $limit,nextToken: $nextToken) { items { id name metadata createdAt updatedAt owner } nextToken __typename } }",
      "variables": {
        "limit": 100,
        "nextToken": "previous-next-token",
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "3",
        "category": "ai",
      },
    },
    {},
  ],
]
`;

exports[`AI Conversation Routes Conversations Update a conversation 1`] = `
[
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "mutation($input: UpdateConversationChatBotInput!) { updateConversationChatBot(input: $input) { id name metadata createdAt updatedAt owner } }",
      "variables": {
        "input": {
          "id": "conversation-id",
          "metadata": "{"arbitrary":"data"}",
          "name": "updated conversation name",
        },
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "9",
        "category": "ai",
      },
    },
    {},
  ],
]
`;

exports[`AI Conversation Routes Conversations Update a conversation 2`] = `
[
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "mutation($input: UpdateConversationChatBotInput!) { updateConversationChatBot(input: $input) { id name metadata createdAt updatedAt owner } }",
      "variables": {
        "input": {
          "id": "conversation-id",
          "metadata": "{"arbitrary":"data"}",
          "name": "updated conversation name",
        },
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "9",
        "category": "ai",
      },
    },
    {},
  ],
]
`;

exports[`AI Conversation Routes Messages List messages 1`] = `
[
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "query($id: ID!) { getConversationChatBot(id: $id) { id name metadata createdAt updatedAt owner } }",
      "variables": {
        "id": "conversation-id",
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "2",
        "category": "ai",
      },
    },
    {},
  ],
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "query($filter: ModelConversationMessageChatBotFilterInput,$limit: Int,$nextToken: String) { listConversationMessageChatBots(filter: $filter,limit: $limit,nextToken: $nextToken) { items { id conversationId role content { text document { format name source { bytes } } image { format source { bytes } } toolResult { content { document { format name source { bytes } } image { format source { bytes } } json text } toolUseId status } toolUse { toolUseId name input } } aiContext toolConfiguration { tools { toolSpec { name description inputSchema { json } } } } createdAt updatedAt owner } nextToken __typename } }",
      "variables": {
        "filter": {
          "conversationId": {
            "eq": "conversation-id",
          },
        },
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "6",
        "category": "ai",
      },
    },
    {},
  ],
]
`;

exports[`AI Conversation Routes Messages Paginate messages 1`] = `
[
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "query($id: ID!) { getConversationChatBot(id: $id) { id name metadata createdAt updatedAt owner } }",
      "variables": {
        "id": "conversation-id",
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "2",
        "category": "ai",
      },
    },
    {},
  ],
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "query($filter: ModelConversationMessageChatBotFilterInput,$limit: Int,$nextToken: String) { listConversationMessageChatBots(filter: $filter,limit: $limit,nextToken: $nextToken) { items { id conversationId role content { text document { format name source { bytes } } image { format source { bytes } } toolResult { content { document { format name source { bytes } } image { format source { bytes } } json text } toolUseId status } toolUse { toolUseId name input } } aiContext toolConfiguration { tools { toolSpec { name description inputSchema { json } } } } createdAt updatedAt owner } nextToken __typename } }",
      "variables": {
        "filter": {
          "conversationId": {
            "eq": "conversation-id",
          },
        },
        "limit": 100,
        "nextToken": "previous-next-token",
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "6",
        "category": "ai",
      },
    },
    {},
  ],
]
`;

exports[`AI Conversation Routes Messages Send a message 1`] = `
[
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "query($id: ID!) { getConversationChatBot(id: $id) { id name metadata createdAt updatedAt owner } }",
      "variables": {
        "id": "conversation-id",
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "2",
        "category": "ai",
      },
    },
    {},
  ],
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "
    mutation($conversationId: ID!, $content: [ContentBlockInput], $aiContext: AWSJSON, $toolConfiguration: ToolConfigurationInput) {
      chatBot(conversationId: $conversationId, content: $content, aiContext: $aiContext, toolConfiguration: $toolConfiguration) {id conversationId role content { text document { format name source { bytes } } image { format source { bytes } } toolResult { content { document { format name source { bytes } } image { format source { bytes } } json text } toolUseId status } toolUse { toolUseId name input } } aiContext toolConfiguration { tools { toolSpec { name description inputSchema { json } } } } createdAt updatedAt owner}
    }
  ",
      "variables": {
        "aiContext": "{"arbitrary":"data"}",
        "content": [
          {
            "text": "foo",
          },
        ],
        "conversationId": "conversation-id",
        "toolConfiguration": {
          "tools": [
            {
              "toolSpec": {
                "description": undefined,
                "inputSchema": {
                  "json": "{"type":"object","properties":{"toolUseParam":{"type":"string"}}}",
                },
                "name": "myTool",
              },
            },
          ],
        },
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "5",
        "category": "ai",
      },
    },
    {},
  ],
]
`;

exports[`AI Conversation Routes Messages Subscribe to messages 1`] = `
[
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "query($id: ID!) { getConversationChatBot(id: $id) { id name metadata createdAt updatedAt owner } }",
      "variables": {
        "id": "conversation-id",
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "2",
        "category": "ai",
      },
    },
    {},
  ],
  [
    {
      "authMode": undefined,
      "authToken": undefined,
      "query": "
    subscription($conversationId: ID!) {
      onCreateAssistantResponseChatBot(conversationId: $conversationId) {id conversationId role content { text document { format name source { bytes } } image { format source { bytes } } toolResult { content { document { format name source { bytes } } image { format source { bytes } } json text } toolUseId status } toolUse { toolUseId name input } } aiContext toolConfiguration { tools { toolSpec { name description inputSchema { json } } } } createdAt updatedAt owner}
    }
  ",
      "variables": {
        "conversationId": "conversation-id",
      },
      Symbol(INTERNAL_USER_AGENT_OVERRIDE): {
        "action": "7",
        "category": "ai",
      },
    },
    {},
  ],
]
`;

exports[`AI Conversation Routes Messages Subscribe to messages 2`] = `
[
  [
    {
      "authMode": undefined,
      "query": "subscription ($conversationId: ID!) {
  onCreateAssistantResponseChatBot(conversationId: $conversationId) {
    id
    conversationId
    role
    content {
      text
      document {
        format
        name
        source {
          bytes
        }
      }
      image {
        format
        source {
          bytes
        }
      }
      toolResult {
        content {
          document {
            format
            name
            source {
              bytes
            }
          }
          image {
            format
            source {
              bytes
            }
          }
          json
          text
        }
        toolUseId
        status
      }
      toolUse {
        toolUseId
        name
        input
      }
    }
    aiContext
    toolConfiguration {
      tools {
        toolSpec {
          name
          description
          inputSchema {
            json
          }
        }
      }
    }
    createdAt
    updatedAt
    owner
  }
}
",
      "variables": {
        "conversationId": "conversation-id",
      },
    },
    {},
  ],
]
`;

exports[`AI Conversation Routes Messages Uses custom conversation handler 1`] = `
"type Mutation {
  SampleChat(conversationId: ID!, content: [ContentBlockInput], aiContext: AWSJSON, toolConfiguration: ToolConfigurationInput): ConversationMessage @conversation(aiModel: "anthropic.claude-3-haiku-20240307-v1:0", systemPrompt: "testSystemPrompt", handler: { functionName: "FnSampleChat", eventVersion: "1.0" }) @aws_cognito_user_pools
}

enum ConversationParticipantRole {
  user
  assistant
}

interface ConversationMessage {
  id: ID!
  conversationId: ID!
  associatedUserMessageId: ID
  role: ConversationParticipantRole
  content: [ContentBlock]
  aiContext: AWSJSON
  toolConfiguration: ToolConfiguration
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}

input DocumentBlockSourceInput {
  bytes: String
}

input DocumentBlockInput {
  format: String!
  name: String!
  source: DocumentBlockSourceInput!
}

input ImageBlockSourceInput {
  bytes: String
}

input ImageBlockInput {
  format: String!
  source: ImageBlockSourceInput!
}

input ToolUseBlockInput {
  toolUseId: String!
  name: String!
  input: AWSJSON!
}

input ToolResultContentBlockInput {
  document: DocumentBlockInput
  image: ImageBlockInput
  json: AWSJSON
  text: String
}

input ToolResultBlockInput {
  content: [ToolResultContentBlockInput!]!
  toolUseId: String!
  status: String
}

type DocumentBlockSource {
  bytes: String
}

type DocumentBlock {
  format: String!
  name: String!
  source: DocumentBlockSource!
}

type ImageBlock {
  format: String!
  source: ImageBlockSource!
}

type ImageBlockSource {
  bytes: String
}

type ToolUseBlock {
  toolUseId: String!
  name: String!
  input: AWSJSON!
}

type ToolResultContentBlock {
  document: DocumentBlock
  image: ImageBlock
  json: AWSJSON
  text: String
}

type ToolResultBlock {
  content: [ToolResultContentBlock!]!
  toolUseId: String!
  status: String
}

type ContentBlockText {
  text: String
}

type ContentBlockImage {
  image: ImageBlock
}

type ContentBlockDocument {
  document: DocumentBlock
}

type ContentBlockToolUse {
  toolUse: ToolUseBlock
}

type ContentBlockToolResult {
  toolResult: ToolResultBlock
}

input ContentBlockInput {
  text: String
  document: DocumentBlockInput
  image: ImageBlockInput
  toolResult: ToolResultBlockInput
  toolUse: ToolUseBlockInput
}

type ContentBlock {
  text: String
  document: DocumentBlock
  image: ImageBlock
  toolResult: ToolResultBlock
  toolUse: ToolUseBlock
}

input ToolConfigurationInput {
  tools: [ToolInput]
}

input ToolInput {
  toolSpec: ToolSpecificationInput
}

input ToolSpecificationInput {
  name: String!
  description: String
  inputSchema: ToolInputSchemaInput!
}

input ToolInputSchemaInput {
  json: AWSJSON
}

type ToolConfiguration {
  tools: [Tool]
}

type Tool {
  toolSpec: ToolSpecification
}

type ToolSpecification {
  name: String!
  description: String
  inputSchema: ToolInputSchema!
}

type ToolInputSchema {
  json: AWSJSON
}

type ConversationMessageStreamPart @aws_cognito_user_pools {
  id: ID!
  owner: String
  conversationId: ID!
  associatedUserMessageId: ID!
  contentBlockIndex: Int
  contentBlockText: String
  contentBlockDeltaIndex: Int
  contentBlockToolUse: ToolUseBlock
  contentBlockDoneAtIndex: Int
  stopReason: String
  errors: [ConversationTurnError]
}

type ConversationTurnError @aws_cognito_user_pools {
  message: String!
  errorType: String!
}"
`;
